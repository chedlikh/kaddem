pipeline {
    agent any

    environment {
        EMAIL_RECIPIENTS = 'chdouuulaa@gmail.com'
        DEFAULT_SUBJECT = 'Build Notification: ${currentBuild.fullDisplayName}'
        DEFAULT_BODY = 'The build status is: ${currentBuild.result}\n\nBuild Log: ${env.BUILD_URL}'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    // Simulate build steps here
                    echo 'Building project...'
                    // Replace with actual build commands (e.g., Maven, Gradle, etc.)
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Simulate testing steps here
                    echo 'Running tests...'
                    // Replace with actual test commands
                    // For example, sh 'mvn test'
                }
            }
        }
    }

    post {
        success {
            script {
                emailext(
                    subject: env.DEFAULT_SUBJECT,
                    body: env.DEFAULT_BODY,
                    to: env.EMAIL_RECIPIENTS
                )
            }
        }
        unstable {
            script {
                emailext(
                    subject: "${env.DEFAULT_SUBJECT} (Unstable)",
                    body: env.DEFAULT_BODY,
                    to: env.EMAIL_RECIPIENTS
                )
            }
        }
        failure {
            script {
                emailext(
                    subject: "${env.DEFAULT_SUBJECT} (Failed)",
                    body: "${env.DEFAULT_BODY}\n\nPlease check the logs for details.",
                    to: env.EMAIL_RECIPIENTS
                )
            }
        }
        always {
            script {
                emailext(
                    subject: "${env.DEFAULT_SUBJECT} (Always)",
                    body: env.DEFAULT_BODY,
                    to: env.EMAIL_RECIPIENTS,
                    recipientProviders: [developers(), requestor()]
                )
            }
        }
    }
}
